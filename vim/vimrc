"                (nothing) In a function: local to a function; otherwise: global
"buffer-variable    b:     Local to the current buffer.
"window-variable    w:     Local to the current window.
"tabpage-variable   t:     Local to the current tab page.
"global-variable    g:     Global.
"local-variable     l:     Local to a function.
"script-variable    s:     Local to a :source'ed Vim script.
"function-argument  a:     Function argument (only inside a function).
"vim-variable       v:     Global, predefined by Vim.
"see more in :help internal-variables

call plug#begin('~/.vim/plugged')
" Plug 'Valloric/YouCompleteMe'
Plug 'jiangmiao/auto-pairs' "自动括号匹配
Plug 'nanotech/jellybeans.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'majutsushi/tagbar'
Plug 'chazy/cscope_maps'
Plug 'yqking/visualmark'
Plug 'Yggdroot/indentLine'
Plug 'skywind3000/asyncrun.vim'
Plug 'wsdjeg/FlyGrep.vim'
call plug#end()

syntax on
"back on final position when it opened.
autocmd BufReadPost *
  \ if line("'\"") > 0 && line ("'\"") <= line("$") |
  \ exe "normal g'\"" |
  \ endif

let g:indentLine_char = '┊'

"search ignorecase
set ic

"show number
set nu

"set keyword
set hls

"set auto indentation
set ai

"display the line for cursor
set cursorline

"set column line boundary
set colorcolumn=81

"set tab & shift step is 4, using space replace tab
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab

"Note, automatically sets foldmethod in the syntax file
autocmd Syntax c,cpp,h setlocal foldmethod=syntax
"When opening the file do not fold function, enable zR
autocmd Syntax c,cpp,h normal zR
"fold shortcat
nnoremap <f11> za

"set omni-compleetion
filetype plugin indent on
set completeopt=longest,menu
imap <f8> <C-X><C-O>
imap <f7> <C-X><C-I>

"tagbar
let g:tagbar_left = 1
nnoremap <F9> :TagbarToggle<CR>
nnoremap <f10> :wincmd p<CR>

"trans to utf8
let $LANG="zh_CN.UTF-8"
set fileencodings=utf-8,gb18030,gbk,gb2312,big5
set termencoding=utf-8
set fileencoding=utf-8
set encoding=utf-8

set nocompatible
set backspace=indent,eol,start

"Automatically remove trailing whitespace
function RemoveTrailingWhitespace()
    if &ft != "diff"
        let b:curcol = col(".")
        let b:curline = line(".")
        silent! %s/\s\+$//
        silent! %s/\(\s*\n\)\+\%$//
        call cursor(b:curline, b:curcol)
    endif
endfunction
autocmd BufWritePre * call RemoveTrailingWhitespace()

"Automatically update tags, when writebuffer.
"set tags=.tags,tags
let g:db = findfile(".cscope.out", ".;")
if (!empty(g:db))
    :silent cscope add .cscope.out
endif

"function! g:UpdateTags()
"    let db = findfile(".cscope.out", ".;")
"    let cmd = 'rm .tags .cscope* tag cscope*'
"    let resp = system(cmd)
"    let cmd = 'find . -name "*.[c|h]" -o -name "*.cpp" > .cscope.files'
"    let resp = system(cmd)
"    let cmd = 'ctags -R -f .tags'
"    let resp = system(cmd)
"    let cmd = 'cscope -Rbkq -f .cscope.out'
"    let resp = system(cmd)
"    if (empty(db))
"        :silent cscope add .cscope.out
"    endif
"    :silent cs reset
"endfunction
"autocmd BufWritePost *.cpp,*.h,*.c,*.hpp call UpdateTags()
"nnoremap <F5> :call UpdateTags()<CR>

function! s:callback_Create_Done(channel)
    if (empty(g:db))
        :silent cscope add .cscope.out
        let g:db = findfile(".cscope.out", ".;")
        sleep 1
    endif
    :silent cs reset
    echo "Re-Build Tags Done!!!!!"
endfunc

function! g:UpdateTags2()
    let job = job_start(['/bin/sh', '-c', 'tagList.sh'], {"close_cb": function("s:callback_Create_Done")})
endfunc

noremap <F5> :call UpdateTags2()<CR>

" FlyGrep an search tool
" List of searching tools will be used 'ag', 'rg', 'grep', 'pt', 'ack'
" Using rg and add following message to "autoload/SpaceVim/mapping/search.vim" rg part
" \ '-g', '!.svn',
" \ '-g', '!.tags',
" \ '-g', '!.cscope*',
let g:spacevim_commandline_prompt = '==>'
let g:FlyGrep_search_tools = 'g' " using ripgrep (rg)
let g:FlyGrep_input_delay = 1800
noremap <F6> :FlyGrep<CR>

" colorschemes
set t_Co=256
colorscheme jellybeans

" toggle Pagination
nnoremap 11 :tabn 1<CR>
nnoremap 22 :tabn 2<CR>
nnoremap 33 :tabn 3<CR>
nnoremap 44 :tabn 4<CR>
nnoremap 55 :tabn 5<CR>
nnoremap 66 :tabn 6<CR>

"airLine
"colorscheme landscape
let g:airline_theme="wombat"
let g:airline_left_sep = ''
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline_right_sep = ''
let g:airline_linecolumn_prefix = ''
let g:airline_linecolumn_prefix = ''
let g:airline_linecolumn_prefix = ''
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#syntastic#enabled = 0
let g:airline#extensions#tagbar#enabled = 1
let g:airline#extensions#csv#enabled = 0
let g:airline#extensions#hunks#enabled = 0
let g:airline#extensions#virtualenv#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_tab_nr = 1
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#tab_nr_type = 1 " tab number
let g:airline_section_x = '%{strftime("%c")}'
